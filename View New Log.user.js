// ==UserScript==
// @name         View New Log
// @namespace    https://support.concurcompleat.com/Logs/
// @updateURL    https://github.com/thambley/compleat-tampermonkey/raw/main/View%20New%20Log.user.js
// @version      0.15
// @description  View formatted log text
// @author       thambley@tlcorporate.com
// @match        https://support.concurcompleat.com/Logs*
// @match        https://support.concurcompleat.com/logs*
// @grant        unsafeWindow
// ==/UserScript==

(function () {
  'use strict';

  var htmlContent = '';

  var locator = null;
  var logs = [];
  var selectedLogs = [];
  var currentHref = document.location.href;

  function jsonHandler(json) {
    if (json.body != null) {
      locator = json.name;
      const found = logs.find(log => log.id == json.id);
      if (found == null) {
        logs.push(json);
        populateSelectedLogs(currentHref);
        updateTableViewButton();
      }
    }
  }

  function populateSelectedLogs(href) {
    var queryParts = href.split('?');
    selectedLogs = [];
    if (queryParts.length > 1) {
      var query = queryParts[1].split('&');
      var parameters = { id: '', sid: [] };
      for (var i = 0; i < query.length; i++) {
        var parameterParts = query[i].split('=');
        if (parameterParts[0] == 'id') {
          parameters.id = parameterParts[1];
        } else if (parameterParts[0] == 'sid') {
          var sid = parameterParts[1];
          parameters.sid.push(sid);
          const found = logs.find(log => log.id == sid);
          if (found != null) {
            selectedLogs.push(found);
          }
        }
      }
    }
  }

  function getContent() {
    if (selectedLogs.length == 0) {
      return null;
    } else {
      return selectedLogs.map(log => log.body).join('\r\n');
    }
  }

  function getRecordLocator() {
    if (locator != null) {
      return locator;
    }
    const labels = Array.from(document.querySelectorAll('label'));
    const recordLocatorLabel = labels.find(el => el.textContent === 'Record Locator');
    return recordLocatorLabel.nextSibling.querySelector('input').value;
  }

  function getAgencyName() {
    return document.getElementById('agency-combo').value;
  }

  function getGds(content) {
    return content.includes('<PNRBFManagement') && content.includes('<OwningCRS>1G</OwningCRS>') ? 'Galileo' :
           content.includes('<PNRBFManagement') && content.includes('<OwningCRS>1V</OwningCRS>') ? 'Apollo' :
           content.includes('DIR0DPN') ? 'Worldspan' :
           content.includes('SD000766') ? 'Sabre' :
           content.includes('http://xml.amadeus.com/') ? 'Amadeus' :
           'Unknown';
  }

  function getFileDate(content) {
    var logDateMatches = content.match(new RegExp('([\\d]+)/([\\d]+)/([\\d]+) ([\\d]+):([\\d]+):([\\d]+)\\.([\\d]+)'));
    var make2Characters = function (str) { return ('0' + str).substring(str.length - 1) };
    var logDateText = '20' + logDateMatches[3] + '_' + make2Characters(logDateMatches[1]) + '_' + make2Characters(logDateMatches[2]) + '_' + make2Characters(logDateMatches[4]) + '_' + make2Characters(logDateMatches[5]) + '_' + logDateMatches[6];
    return logDateText;
  }

  function getWorkflowName(content) {
    var processRegex = new RegExp('(Workflow:|Name:) "([^"]+)"', 'g');
    var processMatches = [...content.matchAll(processRegex)];
    var processMatch = processMatches.find((element) => { return (element[2] !== 'Determine PNR Type' && element[2] !== 'Determine PNR Type - IC Offline (ALTOUR)' && element[2] !== 'Determine PNR Type - IC Online (ALTOUR)') });
    var process = processMatch ? processMatch[2] : 'Unknown';

    return process;
  }

  function getFilename(content) {
    if (content == null) {
      console.log('filename: null');
      return null;
    } else {
      var filenameParts = [getRecordLocator(), getAgencyName().replace(' ', ''), getGds(content), getFileDate(content), getWorkflowName(content)];
      return (filenameParts.join('-') + '.log');
    }
  }

  function updateTableViewButton() {
    const buttons = Array.from(document.querySelectorAll('button'));
    const snippetsButton = buttons.find(el => el.textContent === 'All Snippets' || el.textContent === 'First 15 Snippets');

    if (snippetsButton != null)
    {
      var tableViewButton = document.getElementById('TableViewButton');

      if (tableViewButton == null) {
        const snippetsParent = snippetsButton.parentNode;
        const buttonContainer = snippetsParent.parentNode;

        const tableViewDiv = document.createElement("div");
        tableViewDiv.classList.add("MuiGrid-root");
        tableViewDiv.classList.add("MuiGrid-item");

        tableViewButton = document.createElement("button");
        tableViewButton.id = "TableViewButton";
        tableViewButton.classList.add("MuiButtonBase-root");
        tableViewButton.classList.add("MuiButton-root");
        tableViewButton.classList.add("MuiButton-contained");
        tableViewButton.classList.add("MuiButton-containedSizeSmall");
        tableViewButton.classList.add("MuiButton-sizeSmall");
        tableViewDiv.appendChild(tableViewButton);

        var spanDownload = document.createElement("span");
        tableViewButton.classList.add("MuiButton-label");
        spanDownload.innerText = "View as Table";
        tableViewButton.appendChild(spanDownload);

        buttonContainer.appendChild(tableViewDiv);
      }

      var content = getContent();
      if (content != null) {
        if (tableViewButton.classList.contains('Mui-disabled')) {
          tableViewButton.classList.remove('Mui-disabled');
        }
        tableViewButton.onclick = function () {
          // https://stackoverflow.com/questions/11965087/open-a-new-tab-window-and-write-something-to-it#11967627
          // https://stackoverflow.com/a/38866224 - addresses special handling of $$
          // replace \ with \\ in content to avoid occasional errors about octal escape sequences in template literals
          var tab = window.open('about:blank', '_blank');
          tab.document.write(atob(htmlContent).replace('%FILENAME%', getFilename(content)).split('%LOGTEXT%').join(content.replace(/\\/g, '\\\\').replace(/`/g, '\\`'))); // where 'html' is a variable containing your HTML
          tab.document.close(); // to finish loading the page
        };
      } else {
        if (!tableViewButton.classList.contains('Mui-disabled')) {
          tableViewButton.classList.add('Mui-disabled');
        }
      }
    }
  }

  // clone the response to be handled by the original handler
  function responseHandler(response) {
    var clonedResponse = response.clone();
    response.json().then(jsonHandler);
    return clonedResponse;
  }

  if (document.location.hash != '#infoview') {
    // replace the fetch event to allow the script to get log information
    var old_fetch = unsafeWindow.fetch;
    unsafeWindow.fetch = function (resource, init) {
      return old_fetch(resource, init).then(responseHandler);
    }

    // https://stackoverflow.com/questions/3522090/event-when-window-location-href-changes
    var bodyList = document.querySelector("body")

    var observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (currentHref != document.location.href) {
          currentHref = document.location.href;
          populateSelectedLogs(currentHref);
          updateTableViewButton();
        }
      });
    });

    var config = {
      childList: true,
      subtree: true
    };

    observer.observe(bodyList, config);
  }
})();